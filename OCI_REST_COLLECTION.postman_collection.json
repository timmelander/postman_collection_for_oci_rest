{
	"info": {
		"_postman_id": "5ada99da-747b-4968-9899-815dac1d5be2",
		"name": "OCI_REST_COLLECTION",
		"description": "This is a sample collection for invoking OCI REST APIs via POSTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "721009"
	},
	"item": [
		{
			"name": "ONE_TIME_INITIALIZATION_CALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"jsrsasign\", responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js",
					"protocol": "https",
					"host": [
						"cdnjs",
						"cloudflare",
						"com"
					],
					"path": [
						"ajax",
						"libs",
						"jsrsasign",
						"8.0.12",
						"jsrsasign-all-min.js"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_OCI_ANNOUNCEMENTS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://announcements.us-ashburn-1.oraclecloud.com/20180904/announcements?compartmentId={{TENANCY_OCID}}",
					"protocol": "https",
					"host": [
						"announcements",
						"us-ashburn-1",
						"oraclecloud",
						"com"
					],
					"path": [
						"20180904",
						"announcements"
					],
					"query": [
						{
							"key": "compartmentId",
							"value": "{{TENANCY_OCID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE_OCI_STREAMS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"compartmentId\"    :\"ocid1.compartment.oc1..aaaaaaaao74xptt2gjjxfce4bcxrxlpq63cwhel7l6caymou6cyvug7hhfsa\",\r\n  \"name\"    :\"mynewstream\",   \r\n  \"partitions\"  :  \"1\"   \r\n}\r\n"
				},
				"url": {
					"raw": "https://streams.us-ashburn-1.streaming.oci.oraclecloud.com/20180418/streams",
					"protocol": "https",
					"host": [
						"streams",
						"us-ashburn-1",
						"streaming",
						"oci",
						"oraclecloud",
						"com"
					],
					"path": [
						"20180418",
						"streams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{IDCS_HOST}}/admin/v1/Users",
					"protocol": "https",
					"host": [
						"{{IDCS_HOST}}"
					],
					"path": [
						"admin",
						"v1",
						"Users"
					]
				},
				"description": "Create a confidential client application for use with a webtier policy."
			},
			"response": []
		},
		{
			"name": "Get ID Domains",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"pm.environment.set(\"NEW_DOMAIN_HOST\",responseJson[0].url);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://identity.{{REGION}}.oci.oraclecloud.com/20160918/domains?compartmentId={{TENANCY_OCID}}",
					"protocol": "https",
					"host": [
						"identity",
						"{{REGION}}",
						"oci",
						"oraclecloud",
						"com"
					],
					"path": [
						"20160918",
						"domains"
					],
					"query": [
						{
							"key": "compartmentId",
							"value": "{{TENANCY_OCID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create ID Domain",
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"displayName\": \"TestFromPostman\",\n    \"homeRegion\" : \"{{REGION}}\",\n    \"compartmentId\" : \"{{COMPARTMENT_OCID}}\",\n    \"description\" : \"Test from Postman\",\n    \"licenseType\" : \"Free\"\n\n}"
				},
				"url": {
					"raw": "https://identity.{{REGION}}.oci.oraclecloud.com/20160918/domains",
					"protocol": "https",
					"host": [
						"identity",
						"{{REGION}}",
						"oci",
						"oraclecloud",
						"com"
					],
					"path": [
						"20160918",
						"domains"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:core:2.0:User\"\n  ],\n  \"bypassNotification\": true, \n  \"name\": {\n\t\"givenName\": \"Clarence\",\n\t\"familyName\": \"Saladna\"\n  },\n  \"userName\": \"csaladna@example.com\",\n  \"emails\": [\n\t{\n\t  \"value\": \"csaladna@example.com\",\n\t  \"type\": \"work\",\n\t  \"primary\": true\n\t},\n\t{\n\t  \"value\": \"csaladna@example.com\",\n\t  \"primary\": false,\n\t  \"type\": \"recovery\"\n\t}\n  ]\n}"
				},
				"url": {
					"raw": "https://{{IDCS_HOST}}/admin/v1/Users",
					"protocol": "https",
					"host": [
						"{{IDCS_HOST}}"
					],
					"path": [
						"admin",
						"v1",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a group without members",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"displayName\": \"Example Name\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Example Description\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
				},
				"url": {
					"raw": "https://{{IDCS_HOST}}/admin/v1/Groups",
					"protocol": "https",
					"host": [
						"{{IDCS_HOST}}"
					],
					"path": [
						"admin",
						"v1",
						"Groups"
					]
				},
				"description": "Creating an empty group"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var navigator = {};",
					"var window = {};",
					"eval(pm.globals.get(\"jsrsasign\"));",
					"",
					"var headersToSign = [",
					"        \"(request-target)\",",
					"        \"date\",",
					"        \"host\"",
					"    ];",
					"",
					"",
					"// Set variables",
					"var curr_date = new Date().toUTCString() ;",
					"var date_header = \"date: \"+ curr_date ;",
					"pm.request.headers.upsert({key:'Date',value:curr_date});",
					"var host = pm.variables.replaceIn(pm.request.url.host.join(\".\"));",
					"var tenancy_ocid = pm.environment.get(\"TENANCY_OCID\");",
					"var compartment_ocid = pm.environment.get(\"COMPARTMENT_OCID\");",
					"var user_ocid = pm.environment.get(\"USER_OCID\");",
					"var fingerprint = pm.environment.get(\"FINGERPRINT\");",
					"var private_key =  pm.environment.get(\"PRIVATE_KEY\").trim();",
					"var passphrase =  pm.environment.get(\"PASSPHRASE\");",
					"var api_key = tenancy_ocid + \"/\" + user_ocid + \"/\" + fingerprint;",
					"var escapedTarget = encodeURI(pm.variables.replaceIn(request.url.split(pm.request.url.host.join(\".\")))[1]);",
					"var request_target_header = \"(request-target): \"+ request.method.toLowerCase() + \" \" + escapedTarget;",
					"var host_header = \"host: \" + host;",
					"",
					"var signing_string_array = [ ",
					"                request_target_header,",
					"                date_header,",
					"                host_header];",
					"",
					"var methodsThatRequireExtraHeaders = [\"POST\", \"PUT\", \"PATCH\"];",
					"var body = \"\";",
					"",
					"// Set required body and headers",
					"if(methodsThatRequireExtraHeaders.indexOf(request.method.toUpperCase()) !== -1) {",
					"    body = pm.variables.replaceIn(pm.request.body.raw);",
					"",
					"    var content_length_header = \"content-length: \"+ body.length ; ",
					"    var content_type_header = \"content-type: application/json\";",
					"    ",
					"    var body_hash = new KJUR.crypto.MessageDigest({\"alg\": \"sha256\", \"prov\": \"cryptojs\"});",
					"    body_hash.updateString(body);",
					"    var bHashVal = body_hash.digest();",
					"    var base64_encoded_body_hash = Buffer.from(bHashVal, 'hex').toString('base64');",
					"    ",
					"    var x_content_sha256_header = \"x-content-sha256: \" + base64_encoded_body_hash ; ",
					"    ",
					"\tpm.request.headers.upsert({key:'x-content-sha256',value:base64_encoded_body_hash});",
					"\tpm.request.headers.upsert({key:'Content-Type',value:'application/json'});",
					"    ",
					"    signing_string_array = signing_string_array.concat([",
					"        x_content_sha256_header,",
					"        content_type_header,",
					"        content_length_header ",
					"        ]);",
					"",
					"    headersToSign = headersToSign.concat([",
					"        \"x-content-sha256\",",
					"        \"content-type\",",
					"        \"content-length\"    ",
					"    ]);",
					"    ",
					"}",
					"",
					"var headers=headersToSign.join(\" \"); ",
					"//console.log(headers);",
					"",
					"var signing_string =signing_string_array.join(\"\\n\");",
					"//console.log(signing_string);",
					"",
					"var sig = new KJUR.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
					"",
					"if(passphrase) {",
					"    sig.init(private_key,passphrase);",
					"}else{",
					"    sig.init(private_key);",
					"}",
					"sig.updateString(signing_string);",
					"var hSigVal = sig.sign();",
					"var base64_encoded_signature = Buffer.from(hSigVal, 'hex').toString('base64');",
					"",
					"var auth_string = 'Signature version=\"1\",keyId=\"'+ api_key +'\",algorithm=\"rsa-sha256\",headers=\"'+headers+ '\",signature=\"' + base64_encoded_signature+ '\"';",
					"pm.request.headers.upsert({key:'Authorization',value:auth_string});",
					"",
					"",
					"// Logging",
					"/**",
					"console.log(auth_string);",
					"console.log(\"date: \" + curr_date);",
					"console.log(\"host: \" + host);",
					"console.log(\"user_ocid: \" + user_ocid);",
					"console.log(\"tenancy_ocid: \" + tenancy_ocid);",
					"console.log(\"compartment_ocid: \" + compartment_ocid);",
					"console.log(\"fingerprint: \" + fingerprint);",
					"console.log(\"private_key: \" + private_key);",
					"console.log(\"api_key: \" + api_key);",
					"**/"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}